Workflow Delete and Delete All API Contracts

  Based on the codebase analysis, the workflow delete APIs exist in the service and storage layers but are NOT exposed as REST API endpoints. Here's what exists and
  what's missing:

  Current State

  What EXISTS in the codebase:

  1. Service Layer Methods:
  # In workflow_service.py
  async def delete_workflow(self, workflow_id: str) -> bool
  async def delete_all_workflows(self) -> int

  2. Storage Layer Methods:
  # In workflow_store.py
  def delete(self, workflow_id: str) -> bool
  def delete_all(self) -> int

  3. CLI Commands (simulate deletion):
  workflow manage delete <workflow_id>
  workflow manage delete-all [--force] [--status STATUS] [--plan PLAN_ID]

  What's MISSING:

  - No REST API endpoints for workflow deletion
  - CLI uses workarounds (marks as rejected/cancelled instead of actual deletion)

  Proposed API Contracts (Not Yet Implemented)

  If these endpoints were to be implemented following the existing patterns in the codebase:

  ---
  1. Delete Single Workflow

  Endpoint

  DELETE /api/v1/workflows/{workflow_id}

  Description

  Delete a specific workflow by ID

  Request

  Path Parameters

  | Parameter   | Type   | Required | Description                |
  |-------------|--------|----------|----------------------------|
  | workflow_id | string | Yes      | Unique workflow identifier |

  Response

  Success Response (200 OK)

  {
    "message": "Workflow WF_123_456 deleted successfully",
    "deleted": true
  }

  Not Found Response (404)

  {
    "detail": "Workflow WF_123_456 not found"
  }

  Error Response (500)

  {
    "detail": "Failed to delete workflow: {error_message}"
  }

  ---
  2. Delete All Workflows

  Endpoint

  DELETE /api/v1/workflows

  Description

  Delete all workflows from the system

  Request

  Query Parameters

  | Parameter | Type    | Required | Description                            |
  |-----------|---------|----------|----------------------------------------|
  | force     | boolean | No       | Skip confirmation (default: false)     |
  | status    | string  | No       | Only delete workflows with this status |
  | plan_id   | string  | No       | Only delete workflows for this plan    |

  Response

  Success Response (200 OK)

  {
    "message": "All workflows deleted successfully",
    "deleted_count": 42
  }

  Error Response (500)

  {
    "detail": "Failed to delete workflows: {error_message}"
  }

  ---
  Implementation Status Summary

  | Component     | Delete Single              | Delete All                 |
  |---------------|----------------------------|----------------------------|
  | Storage Layer | ✅ Implemented              | ✅ Implemented              |
  | Service Layer | ✅ Implemented              | ✅ Implemented              |
  | REST API      | ❌ Not Implemented          | ❌ Not Implemented          |
  | CLI           | ⚠️ Simulated (uses reject) | ⚠️ Simulated (uses reject) |

  Service Layer Implementation (Existing)

  # workflow_service.py

  async def delete_workflow(self, workflow_id: str) -> bool:
      """Delete workflow.

      Args:
          workflow_id: Workflow ID

      Returns:
          True if deleted, False if not found

      Raises:
          ValueError: Invalid workflow_id (NO FALLBACK)
      """
      if not workflow_id or not isinstance(workflow_id, str):
          raise ValueError("workflow_id must be a non-empty string")

      return self.workflow_store.delete(workflow_id)

  async def delete_all_workflows(self) -> int:
      """Delete all workflows.

      Returns:
          Number of workflows deleted
      """
      return self.workflow_store.delete_all()

  Storage Layer Implementation (Existing)

  # workflow_store.py

  def delete(self, workflow_id: str) -> bool:
      """Delete workflow from database."""
      # Executes: DELETE FROM workflows WHERE id = ?
      # Returns: True if deleted, False if not found

  def delete_all(self) -> int:
      """Delete all workflows from database."""
      # Executes: DELETE FROM workflows
      # Returns: Number of rows deleted

  Why Not Exposed as APIs?

  The workflow deletion functionality exists at the service and storage layers but hasn't been exposed as REST endpoints, likely because:

  1. Audit Requirements: Workflows contain important approval history that may need to be preserved
  2. State Management: Workflows have complex state transitions that may need soft deletion
  3. Referential Integrity: Workflows are linked to plans, analyses, and transcripts

  The CLI currently simulates deletion by marking workflows as "REJECTED" with a deletion reason, preserving the audit trail while effectively removing them from active
   use.